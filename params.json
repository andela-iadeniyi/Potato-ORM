{
  "name": "Potato-orm",
  "tagline": "Object Relational Mapper",
  "body": "# Potato-ORM\r\n\r\n[![Build Status](https://travis-ci.org/andela-iadeniyi/Potato-ORM.svg)](https://travis-ci.org/andela-iadeniyi/Potato-ORM)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](https://github.com/andela-iadeniyi/Potato-ORM/blob/master/LICENCE)\r\n[![Quality Score](https://img.shields.io/scrutinizer/g/andela-iadeniyi/Potato-ORM.svg?style=flat-square)](https://scrutinizer-ci.com/g/andela-iadeniyi/Potato-ORM)\r\n[![Scruitinizer Code](https://scrutinizer-ci.com/g/andela-iadeniyi/Potato-ORM/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/andela-iadeniyi/Potato-ORM)\r\n[![Code Climate](https://codeclimate.com/github/andela-iadeniyi/Potato-ORM/badges/gpa.svg)](https://codeclimate.com/github/andela-iadeniyi/Potato-ORM)\r\n[![Test Coverage](https://codeclimate.com/github/andela-iadeniyi/Potato-ORM/badges/coverage.svg)](https://codeclimate.com/github/andela-iadeniyi/Potato-ORM/coverage)\r\n\r\nPotato-ORM is a package that manages the CRUD operation of database. Potato-ORM currently supports `MYSQL`, `POSTGRES` and `SQLITE` Database.\r\n\r\n## Installation\r\n\r\n[PHP](https://php.net) 5.5+ and [Composer](https://getcomposer.org) are required.\r\n\r\nVia Composer\r\n\r\n```\r\n$ composer require ibonly/potato-orm\r\n```\r\n\r\n```\r\n$ composer install\r\n```\r\n\r\n## Usage\r\n\r\n### App Namespace\r\n\r\n```\r\n    namespace Ibonly\\PotatoORM\r\n```\r\n\r\nCreate a `Class` that correspond to the singular form of the table name in the database. i.e.\r\n\r\n```php\r\n    namespace Ibonly\\PotatoORM;\r\n\r\n    class User extends Model\r\n    {\r\n        protected $table = 'tableName';\r\n\r\n        protected fillables = ['name', 'email'];\r\n    }\r\n```\r\nThe table name can also be defined in the model if the user wants it to be specified.\r\n\r\nThe fields that is to be output can also be specified as `protected $fillables = []`. \r\n\r\nThe `Model` class contains `getAll()`, `where([$field => $value])`, `find($value)`, `save()`, update() and `detroy($id)` methods.\r\n\r\n### getAll()\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n\r\n    $sugar = new User();\r\n\r\n    return $sugar->getAll()->all();\r\n```\r\n\r\n    Return type = JSON\r\n\r\n### where($field, $value)\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n\r\n    $sugar = new User();\r\n\r\n    return $sugar->where([$field => $value])->first()->username;\r\n```\r\nPassing conditions to where\r\n\r\n```php\r\n\r\n    return $sugar->where([$field => $value, $field2 => $value2], 'AND')->first()->username;\r\n```\r\n\r\n    Return type = String\r\n\r\n\r\n### Update($value): \r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n    $update = new User();\r\n\r\n    $update->password = \"password\";\r\n    echo $insert->update(1)\r\n\r\n```\r\n\r\n    To return custom message, wrap the `save()` method in an `if statement`\r\n\r\n    Return type = Boolean\r\n\r\n### save()\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n\r\n    $insert = new User();\r\n    $insert->id = NULL;\r\n    $insert->username = \"username\";\r\n    $insert->email = \"example@example.com\";\r\n    $insert->password = \"password\";\r\n    echo $insert->save();\r\n```\r\n\r\n    To return custom message, wrap the `save()` method in an `if statement`\r\n\r\n    Return type = Boolean\r\n\r\n### file($fileName)->uploadFile()\r\n\r\nThis method is used to upload file, it can only be used along side `save()` and `update($id)`\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n\r\n    $insert = new User();\r\n    $insert->id = NULL;\r\n    $insert->username = \"username\";\r\n    $insert->email = \"example@example.com\";\r\n    $insert->avatar = $this->content->file($_FILES['image'])->uploadFile($uploadDirectory);\r\n    $insert->password = \"password\";\r\n    echo $insert->save();\r\n\r\n```\r\n\r\n### detroy($value)\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\User;\r\n\r\n    $insert = User::destroy(2);\r\n    die($insert);\r\n```\r\n\r\n    Return type = Boolean\r\n\r\n## Create Database Table\r\n\r\nIts is also possible to create Database Table with the `Schema` class. The table name will be specified in the\r\n`createTable($name)` method.\r\n\r\n```php\r\n    use Ibonly\\PotatoORM\\Schema;\r\n\r\n    $user = new Schema;\r\n    $user->field('increments', 'id');\r\n    $user->field('strings', 'username');\r\n    $user->field('strings', 'name', 50);\r\n    $user->field('integer', 'age');\r\n    $user->field('primaryKey', 'id');\r\n\r\n    echo $table->createTable('players');\r\n```\r\n    Return type = Boolean\r\n\r\n#### Database Constraint\r\n\r\n\r\nForeign Key\r\n\r\n```php\r\n    $user->field('foreignKey', 'id', 'users-id');\r\n```\r\n\r\nThe reference table `(users)` and field `(id)` will be written as `(users-id)`\r\n\r\n\r\nUnique Key\r\n\r\n```php\r\n    $user->field('unique', 'email')\r\n```\r\n\r\n\r\n## Testing\r\n\r\n```\r\n$ vendor/bin/phpunit test\r\n```\r\n\r\n## Contributing\r\n\r\nTo contribute and extend the scope of this package,\r\nPlease check out [CONTRIBUTING](CONTRIBUTING.md) file for detailed contribution guidelines.\r\n\r\n## Credits\r\n\r\nPotato-ORM is created and maintained by `Ibraheem ADENIYI`.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}